<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Progracacos]]></title>
  <link href="http://Knicker.github.io/progracacos/atom.xml" rel="self"/>
  <link href="http://Knicker.github.io/progracacos/"/>
  <updated>2014-10-09T02:59:03+02:00</updated>
  <id>http://Knicker.github.io/progracacos/</id>
  <author>
    <name><![CDATA[Pablo Ruiz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Transición Entre Activities]]></title>
    <link href="http://Knicker.github.io/progracacos/blog/2014/07/07/historia-de-android/"/>
    <updated>2014-07-07T20:03:41+02:00</updated>
    <id>http://Knicker.github.io/progracacos/blog/2014/07/07/historia-de-android</id>
    <content type="html"><![CDATA[<p>La transición entre Activities la realizaremos con <code>overridePendingTransition()</code> que sobreescribirá las animaciones por defecto por las animaciones que pasemos por parámetro.<!-- more --> Tendremos que llamar al método siempre que vaya a suceder una transición, como por ejemplo, al abrir o cerrar una <code>Activity</code> e indicar las animaciones de entrada y salida.</p>

<h1>Animación XML</h1>

<p>Para ello tendremos que crear archivos XML donde indicaremos el comportamiento de las animaciones con ayuda diferentes atributos para definir el comportamiento de nuestra animación, a continuación:</p>

<ul>
<li><code>translate</code>: desplazamiento.

<ul>
<li><code>fromXDelta</code>, <code>toXDelta</code>: Valor inicial y final sobre el eje X.</li>
<li><code>fromYDelta</code>, <code>toYDelta</code>: Valor inicial y final sobre el eje Y.</li>
</ul>
</li>
<li><code>rotate</code>: rotación.

<ul>
<li><code>fromDegress</code>, <code>toDegrees</code>: Valor inicial y final en grados de la rotación (un giro completo sería de 0 a 360).</li>
<li><code>pivotX</code>, <code>pivotY</code>: Punto sobre el que se realizará el giro.</li>
</ul>
</li>
<li><code>scale</code>: tamaño.

<ul>
<li><code>fromXScale</code>, <code>toXScale</code>: Valor inicial y final para el tamaño del eje X.</li>
<li><code>fromYScale</code>, <code>toYScale</code>: Valor inicial y final para el tamaño del eje Y.</li>
<li><code>pivotX</code>, <code>pivotY</code>: Punto sobre el que se realizará el zoom.</li>
</ul>
</li>
<li><code>alpha</code>: opacidad.

<ul>
<li><code>fromAlpha</code>, <code>toAlpha</code>: Valor inicial y final de la opacidad.</li>
</ul>
</li>
</ul>


<p>En este caso crearemos cuatro para recrear el efecto de la animación de transición por defecto de <code>Android 2.0</code> que es un desplazamiento horizontal donde simula la actividad entrante empujando a la actividad saliente.</p>

<p>El evento <code>onClick()</code> de la actividad principal, sobreescribimos las transiciones pendientes al llamar a la segunda actividad:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>               
</span><span class='line'><span class="n">overridePendingTransition</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">entrar_derecha</span><span class="o">,</span>
</span><span class='line'>      <span class="n">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">salir_izquierda</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
